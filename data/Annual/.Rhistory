# This function is the same as the previous function,
# but takes in the pollutant type and years as arguments.
# Much faster as long as you know the pollutant codes.
PMviz <- function(type, years)
{
# store vector of composition codes
comp <- c("PM25", "SO4", "NIT", "NH4", "OM", "BC", "SOIL", "SS")
# store vector of years
if (missing(years))
{ years <- c(2000:2017) }
# argument error-checking
if (!(type %in% comp))
{
message("ERROR: Invalid pollutant type. Use one of the following codes:")
print(c("PM25 (total particulate matter)","SO4  (sulfate)",
"NIT  (nitrate)", "NH4  (ammonium)",
"OM   (organic matter)", "BC   (black carbon)",
"SOIL (mineral dust)", "SS   (sea-salt)"))
invokeRestart("abort")
}
message("Gathering data, please wait...")
# PM25 data has a unique filename, so we handle it alone here
if (type == "PM25")
{
year <- years[1]
filename <- paste("data/PM25/V4NA03_PM25_NA_", year, '01_', year,
'12-RH35.nc', sep="")
r <- stack(raster(filename, varname = "PM25"))
if (length(years) > 1) # if start and end are the same, skip this
{
for (year in years)
{
filename <- paste("data/PM25/V4NA03_PM25_NA_", year, '01_', year,
'12-RH35.nc', sep="")
r <- stack(r, raster(filename, varname = "PM25"))
}
}
}
else # the rest of the data has similar filenames
{
year <- years[1]
filename <- paste("data/", type, "/GWRwSPEC_", type, 'p_NA_',
year, '01_', year, '12-wrtSPECtotal.nc', sep="")
r <- stack(raster(filename, varname = type))
if (length(years) > 1) # if start and end are the same, skip this
{
for (year in years[2:length(years)])
{
filename <- paste("data/", type, "/GWRwSPEC_", type, 'p_NA_',
year, '01_', year, '12-wrtSPECtotal.nc', sep="")
r <- stack(r, raster(filename, varname = type))
}
}
}
names(r) <- paste("PM25 in", years)
plot_count <- length(years)
# set min and max for all raster layers
# NOTE: this part can take a while, but is necessary to have
# comparable color intervals across plots.
r <- setMinMax(r)
# maxValue returns a vector with the max for each individual
# layer (year in our context). Taking the max of that vector will give us
# the max across all years in the raster, so that we can set a reasonable
# scale of values across all plots for easy comparison from 0 to max.
max <- max(maxValue(r))
message("Plotting data...")
if (plot_count < 6)
{
plot(r,1:plot_count, breaks=c(seq(0,50,5)),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
else if (plot_count < 12)
{
plot(r,1:6, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,7:plot_count, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
else
{
plot(r,1:6, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,7:12, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,13:plot_count, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
message("Done!")
}
PMviz("SO4", c(2000,2003,2006))
library(raster)
library(RColorBrewer)
PMviz <- function(type, years)
{
# store vector of composition codes
comp <- c("PM25", "SO4", "NIT", "NH4", "OM", "BC", "SOIL", "SS")
# store vector of years
if (missing(years))
{ years <- c(2000:2017) }
# argument error-checking
if (!(type %in% comp))
{
message("ERROR: Invalid pollutant type. Use one of the following codes:")
print(c("PM25 (total particulate matter)","SO4  (sulfate)",
"NIT  (nitrate)", "NH4  (ammonium)",
"OM   (organic matter)", "BC   (black carbon)",
"SOIL (mineral dust)", "SS   (sea-salt)"))
invokeRestart("abort")
}
message("Gathering data, please wait...")
# PM25 data has a unique filename, so we handle it alone here
if (type == "PM25")
{
year <- years[1]
filename <- paste("data/PM25/V4NA03_PM25_NA_", year, '01_', year,
'12-RH35.nc', sep="")
r <- stack(raster(filename, varname = "PM25"))
if (length(years) > 1) # if start and end are the same, skip this
{
for (year in years)
{
filename <- paste("data/PM25/V4NA03_PM25_NA_", year, '01_', year,
'12-RH35.nc', sep="")
r <- stack(r, raster(filename, varname = "PM25"))
}
}
}
else # the rest of the data has similar filenames
{
year <- years[1]
filename <- paste("data/", type, "/GWRwSPEC_", type, 'p_NA_',
year, '01_', year, '12-wrtSPECtotal.nc', sep="")
r <- stack(raster(filename, varname = type))
if (length(years) > 1) # if start and end are the same, skip this
{
for (year in years[2:length(years)])
{
filename <- paste("data/", type, "/GWRwSPEC_", type, 'p_NA_',
year, '01_', year, '12-wrtSPECtotal.nc', sep="")
r <- stack(r, raster(filename, varname = type))
}
}
}
names(r) <- paste("PM25 in", years)
plot_count <- length(years)
# set min and max for all raster layers
# NOTE: this part can take a while, but is necessary to have
# comparable color intervals across plots.
r <- setMinMax(r)
# maxValue returns a vector with the max for each individual
# layer (year in our context). Taking the max of that vector will give us
# the max across all years in the raster, so that we can set a reasonable
# scale of values across all plots for easy comparison from 0 to max.
max <- max(maxValue(r))
message("Plotting data...")
if (plot_count < 6)
{
plot(r,1:plot_count, breaks=c(seq(0,50,5)),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
else if (plot_count < 12)
{
plot(r,1:6, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,7:plot_count, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
else
{
plot(r,1:6, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,7:12, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,13:plot_count, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
message("Done!")
}
PMviz("PM25", c(2000,2017))
PMviz("PM25", c(2000,2017))
PMviz("SO4", c(2000,2017))
PMviz <- function(type, years)
{
# store vector of composition codes
comp <- c("PM25", "SO4", "NIT", "NH4", "OM", "BC", "SOIL", "SS")
# store vector of years
if (missing(years))
{ years <- c(2000:2017) }
# argument error-checking
if (!(type %in% comp))
{
message("ERROR: Invalid pollutant type. Use one of the following codes:")
print(c("PM25 (total particulate matter)","SO4  (sulfate)",
"NIT  (nitrate)", "NH4  (ammonium)",
"OM   (organic matter)", "BC   (black carbon)",
"SOIL (mineral dust)", "SS   (sea-salt)"))
invokeRestart("abort")
}
message("Gathering data, please wait...")
# PM25 data has a unique filename, so we handle it alone here
if (type == "PM25")
{
year <- years[1]
filename <- paste("data/PM25/V4NA03_PM25_NA_", year, '01_', year,
'12-RH35.nc', sep="")
r <- stack(raster(filename, varname = "PM25"))
if (length(years) > 1) # if start and end are the same, skip this
{
for (year in years[2:length(years)])
{
filename <- paste("data/PM25/V4NA03_PM25_NA_", year, '01_', year,
'12-RH35.nc', sep="")
r <- stack(r, raster(filename, varname = "PM25"))
}
}
}
else # the rest of the data has similar filenames
{
year <- years[1]
filename <- paste("data/", type, "/GWRwSPEC_", type, 'p_NA_',
year, '01_', year, '12-wrtSPECtotal.nc', sep="")
r <- stack(raster(filename, varname = type))
if (length(years) > 1) # if start and end are the same, skip this
{
for (year in years[2:length(years)])
{
filename <- paste("data/", type, "/GWRwSPEC_", type, 'p_NA_',
year, '01_', year, '12-wrtSPECtotal.nc', sep="")
r <- stack(r, raster(filename, varname = type))
}
}
}
names(r) <- paste("PM25 in", years)
plot_count <- length(years)
# set min and max for all raster layers
# NOTE: this part can take a while, but is necessary to have
# comparable color intervals across plots.
r <- setMinMax(r)
# maxValue returns a vector with the max for each individual
# layer (year in our context). Taking the max of that vector will give us
# the max across all years in the raster, so that we can set a reasonable
# scale of values across all plots for easy comparison from 0 to max.
max <- max(maxValue(r))
message("Plotting data...")
if (plot_count < 6)
{
plot(r,1:plot_count, breaks=c(seq(0,50,5)),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
else if (plot_count < 12)
{
plot(r,1:6, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,7:plot_count, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
else
{
plot(r,1:6, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,7:12, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,13:plot_count, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
message("Done!")
}
PMviz("PM25", c(2000,2017))
PMviz <- function(type, years)
{
# store vector of composition codes
comp <- c("PM25", "SO4", "NIT", "NH4", "OM", "BC", "SOIL", "SS")
# store vector of years
if (missing(years))
{ years <- c(2000:2017) }
# argument error-checking
if (!(type %in% comp))
{
message("ERROR: Invalid pollutant type. Use one of the following codes:")
print(c("PM25 (total particulate matter)","SO4  (sulfate)",
"NIT  (nitrate)", "NH4  (ammonium)",
"OM   (organic matter)", "BC   (black carbon)",
"SOIL (mineral dust)", "SS   (sea-salt)"))
invokeRestart("abort")
}
message("Gathering data, please wait...")
# PM25 data has a unique filename, so we handle it alone here
if (type == "PM25")
{
year <- years[1]
filename <- paste("data/PM25/V4NA03_PM25_NA_", year, '01_', year,
'12-RH35.nc', sep="")
r <- stack(raster(filename, varname = "PM25"))
if (length(years) > 1) # if start and end are the same, skip this
{
for (year in years[2:length(years)])
{
filename <- paste("data/PM25/V4NA03_PM25_NA_", year, '01_', year,
'12-RH35.nc', sep="")
r <- stack(r, raster(filename, varname = "PM25"))
}
}
}
else # the rest of the data has similar filenames
{
year <- years[1]
filename <- paste("data/", type, "/GWRwSPEC_", type, 'p_NA_',
year, '01_', year, '12-wrtSPECtotal.nc', sep="")
r <- stack(raster(filename, varname = type))
if (length(years) > 1) # if start and end are the same, skip this
{
for (year in years[2:length(years)])
{
filename <- paste("data/", type, "/GWRwSPEC_", type, 'p_NA_',
year, '01_', year, '12-wrtSPECtotal.nc', sep="")
r <- stack(r, raster(filename, varname = type))
}
}
}
names(r) <- paste(type, " in", years)
plot_count <- length(years)
# set min and max for all raster layers
# NOTE: this part can take a while, but is necessary to have
# comparable color intervals across plots.
r <- setMinMax(r)
# maxValue returns a vector with the max for each individual
# layer (year in our context). Taking the max of that vector will give us
# the max across all years in the raster, so that we can set a reasonable
# scale of values across all plots for easy comparison from 0 to max.
max <- max(maxValue(r))
message("Plotting data...")
if (plot_count < 6)
{
plot(r,1:plot_count, breaks=c(seq(0,50,5)),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
else if (plot_count < 12)
{
plot(r,1:6, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,7:plot_count, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
else
{
plot(r,1:6, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,7:12, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,13:plot_count, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
message("Done!")
}
PMviz("SO4", 2000)
PMviz("SO4", 2000:2002)
PMviz <- function(type, years)
{
# store vector of composition codes
comp <- c("PM25", "SO4", "NIT", "NH4", "OM", "BC", "SOIL", "SS")
# store vector of years
if (missing(years))
{ years <- c(2000:2017) }
# argument error-checking
if (!(type %in% comp))
{
message("ERROR: Invalid pollutant type. Use one of the following codes:")
print(c("PM25 (total particulate matter)","SO4  (sulfate)",
"NIT  (nitrate)", "NH4  (ammonium)",
"OM   (organic matter)", "BC   (black carbon)",
"SOIL (mineral dust)", "SS   (sea-salt)"))
invokeRestart("abort")
}
message("Gathering data, please wait...")
# PM25 data has a unique filename, so we handle it alone here
if (type == "PM25")
{
year <- years[1]
filename <- paste("data/PM25/V4NA03_PM25_NA_", year, '01_', year,
'12-RH35.nc', sep="")
r <- stack(raster(filename, varname = "PM25"))
if (length(years) > 1) # if start and end are the same, skip this
{
for (year in years[2:length(years)])
{
filename <- paste("data/PM25/V4NA03_PM25_NA_", year, '01_', year,
'12-RH35.nc', sep="")
r <- stack(r, raster(filename, varname = "PM25"))
}
}
}
else # the rest of the data has similar filenames
{
year <- years[1]
filename <- paste("data/", type, "/GWRwSPEC_", type, 'p_NA_',
year, '01_', year, '12-wrtSPECtotal.nc', sep="")
r <- stack(raster(filename, varname = type))
if (length(years) > 1) # if start and end are the same, skip this
{
for (year in years[2:length(years)])
{
filename <- paste("data/", type, "/GWRwSPEC_", type, 'p_NA_',
year, '01_', year, '12-wrtSPECtotal.nc', sep="")
r <- stack(r, raster(filename, varname = type))
}
}
}
names(r) <- paste(type, "in", years)
plot_count <- length(years)
# set min and max for all raster layers
# NOTE: this part can take a while, but is necessary to have
# comparable color intervals across plots.
r <- setMinMax(r)
# maxValue returns a vector with the max for each individual
# layer (year in our context). Taking the max of that vector will give us
# the max across all years in the raster, so that we can set a reasonable
# scale of values across all plots for easy comparison from 0 to max.
max <- max(maxValue(r))
message("Plotting data...")
if (plot_count < 6)
{
plot(r,1:plot_count, breaks=c(seq(0,50,5)),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
else if (plot_count < 12)
{
plot(r,1:6, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,7:plot_count, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
else
{
plot(r,1:6, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,7:12, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,13:plot_count, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
message("Done!")
}
rm(list=ls())
sum(sapply(ls(envir=globalenv()), function(x)object.size(get(x))))
workspace.size <- function() {
ws <- sum(sapply(ls(envir=globalenv()), function(x)object.size(get(x))))
class(ws) <- "object_size"
ws
}
workspace.size()
library(ncdf)
library(ncdf4)
library(raster)
workspace.size()
data_dir <- "C:/Users/nickw/OneDrive/Desktop/UF/Undergrad Research/PM-research/data/Annual"
setwd(data_dir)
names <- c("BC", "NH4", "NIT", "OM", "SO4", "SOIL", "SS")
files <- c()
# get annual data for all components in the year 2000
for (name in names)
{
files <- append(files,
file.path(name,
list.files(path = file.path(data_dir, name),
pattern="200012.nc")))
}
r <- stack(files)
# crop raster layers to bounded box of USA
e <- as(extent(-124.848974, -66.885444, 24.396308, 49.384358), 'SpatialPolygons')
crs(e) <- "+proj=longlat +datum=WGS84 +no_defs"
usa <- crop(r, e)
workspace.size()
# take a random sample of only 1% of the data
usa.sample <- as.data.frame(sampleRandom(usa, size=(dim(usa)[1]*dim(usa)[2]*0.01),
xy=TRUE, na.rm=TRUE))
workspace.size()
size(usa.sample)
# perform k-means clustering, store cluster id in data frame
usa.sample <- data.frame(usa.sample, k = kmeans(usa.sample, 7)$cluster)
workspace.size()
size(r)
object.size(r)
