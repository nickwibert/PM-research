names <- c("BC", "NH4", "NIT", "OM", "SO4", "SOIL", "SS")
usa <- readOGR("C:/Users/nickw/OneDrive/Desktop/UF/Undergrad Research/PM-research/data/cb_2018_us_nation_5m.shp")
# crop to lower 48 states
e <- as(extent(-125, -66, 24, 50), 'SpatialPolygons')
crs(e) <- "+proj=longlat +datum=WGS84 +no_defs"
usa <- crop(usa,e)
#1. coerce to points, then to data frame
# names are Lines.NR Lines.ID Line.NR coords.x1 coords.x2
## start here for polys
lin <- as(usa, "SpatialLinesDataFrame")
## start here for lines
pts <- as.data.frame(as(lin, "SpatialPointsDataFrame"))
#3. convert to data frame
# names are        long      lat order  hole piece  id group
dpts <- ggplot2::fortify(usa)
x.usa <- dpts$long
y.usa <- dpts$lat
for (year in years)
{
files <- c()
# get annual data for all components in the current year
for (name in names)
{
files <- append(files,
file.path(data_dir,name,
list.files(path = file.path(data_dir, name),
pattern=paste(year, "12.nc", sep=""))))
}
r <- stack(files)
# crop raster layers to bounded box of USA
e <- as(extent(-124.848974, -66.885444, 24.396308, 49.384358), 'SpatialPolygons')
crs(e) <- "+proj=longlat +datum=WGS84 +no_defs"
r <- crop(r, e)
# take a random sample of only 1% of the data
r.sample <- as.data.frame(sampleRandom(r, size=(dim(r)[1]*dim(r)[2]*0.01),
xy=TRUE, na.rm=TRUE))
x <- r.sample[,1]
y <- r.sample[,2]
xy <- data.frame(x,y)
coordinates(xy) = ~x + y
proj4string(xy) = proj4string(usa)
ov <- over(xy, as(usa,"SpatialPolygons"))
r.sample <- data.frame(r.sample, inUSA = ov)
r.final <- r.sample[complete.cases(r.sample),]
# perform k-means clustering, store cluster id in data frame
usa.kmeans <- kmeans(r.final[,-c(1,2,10)], 5)
# plot data points where color is determined by cluster
plot(r.final$x, r.final$y, col = usa.kmeans$cluster,
xlab = "Latitude", ylab = "Longitude",
main = paste("K-Means Clustering for ", year, sep=""),
pch=1, cex.main=0.8, cex.lab = 0.7, cex.axis = 0.6, cex=0.8)
lines(usa)
legend(-126, 35, legend=sort(unique(usa.kmeans$cluster)),
col = sort(unique(usa.kmeans$cluster)), pch = 19, cex = 0.7)
# Heatmap
centers <- usa.kmeans$centers
centers <- cbind(centers, rowSums(centers))
colnames(centers)[8] <- "Total"
heatmap(t(centers), main = paste("Cluster Centers for ", year, sep=""),
xlab = "Cluster", ylab = "Component", col = brewer.pal(9, "OrRd"))
legend(x = "bottomright", legend=round(seq(min(centers),max(centers), length.out=9),1),
col=brewer.pal(9, "OrRd"), pch = 15, pt.cex=4)
rm(list=c("files", "r.sample", "r.final", "centers", "r", "ov", "usa.kmeans", "xy"))
}
rm(list=ls())
data_dir <- "C:/Users/nickw/OneDrive/Desktop/UF/Undergrad Research/PM-research/data/Annual"
years <- 2013:2016
names <- c("BC", "NH4", "NIT", "OM", "SO4", "SOIL", "SS")
usa <- readOGR("C:/Users/nickw/OneDrive/Desktop/UF/Undergrad Research/PM-research/data/cb_2018_us_nation_5m.shp")
# crop to lower 48 states
e <- as(extent(-125, -66, 24, 50), 'SpatialPolygons')
crs(e) <- "+proj=longlat +datum=WGS84 +no_defs"
usa <- crop(usa,e)
#1. coerce to points, then to data frame
# names are Lines.NR Lines.ID Line.NR coords.x1 coords.x2
## start here for polys
lin <- as(usa, "SpatialLinesDataFrame")
## start here for lines
pts <- as.data.frame(as(lin, "SpatialPointsDataFrame"))
#3. convert to data frame
# names are        long      lat order  hole piece  id group
dpts <- ggplot2::fortify(usa)
x.usa <- dpts$long
y.usa <- dpts$lat
for (year in years)
{
files <- c()
# get annual data for all components in the current year
for (name in names)
{
files <- append(files,
file.path(data_dir,name,
list.files(path = file.path(data_dir, name),
pattern=paste(year, "12.nc", sep=""))))
}
r <- stack(files)
# crop raster layers to bounded box of USA
e <- as(extent(-124.848974, -66.885444, 24.396308, 49.384358), 'SpatialPolygons')
crs(e) <- "+proj=longlat +datum=WGS84 +no_defs"
r <- crop(r, e)
# take a random sample of only 1% of the data
r.sample <- as.data.frame(sampleRandom(r, size=(dim(r)[1]*dim(r)[2]*0.01),
xy=TRUE, na.rm=TRUE))
x <- r.sample[,1]
y <- r.sample[,2]
xy <- data.frame(x,y)
coordinates(xy) = ~x + y
proj4string(xy) = proj4string(usa)
ov <- over(xy, as(usa,"SpatialPolygons"))
r.sample <- data.frame(r.sample, inUSA = ov)
r.final <- r.sample[complete.cases(r.sample),]
# perform k-means clustering, store cluster id in data frame
usa.kmeans <- kmeans(r.final[,-c(1,2,10)], 5)
# plot data points where color is determined by cluster
plot(r.final$x, r.final$y, col = usa.kmeans$cluster,
xlab = "Latitude", ylab = "Longitude",
main = paste("K-Means Clustering for ", year, sep=""),
pch=1, cex.main=0.8, cex.lab = 0.7, cex.axis = 0.6, cex=0.8)
lines(usa)
legend(-126, 35, legend=sort(unique(usa.kmeans$cluster)),
col = sort(unique(usa.kmeans$cluster)), pch = 19, cex = 0.7)
# Heatmap
centers <- usa.kmeans$centers
centers <- cbind(centers, rowSums(centers))
colnames(centers)[8] <- "Total"
heatmap(t(centers), main = paste("Cluster Centers for ", year, sep=""),
xlab = "Cluster", ylab = "Component", col = brewer.pal(9, "OrRd"))
legend(x = "bottomright", legend=round(seq(min(centers),max(centers), length.out=9),1),
col=brewer.pal(9, "OrRd"), pch = 15, pt.cex=4)
rm(list=c("files", "r.sample", "r.final", "centers", "r", "ov", "usa.kmeans", "xy"))
}
rm(list=ls())
library(stats)
library(ncdf4)
library(raster)
library(sf)
library(rgdal)
library(ggplot2)
library(tigris)
library(tidyverse)
library(rgeos)
library(spatialEco)
library(ptinpoly)
data_dir <- "C:/Users/nickw/OneDrive/Desktop/UF/Undergrad Research/PM-research/data/Annual"
years <- 2013:2016
names <- c("BC", "NH4", "NIT", "OM", "SO4", "SOIL", "SS")
usa <- readOGR("C:/Users/nickw/OneDrive/Desktop/UF/Undergrad Research/PM-research/data/cb_2018_us_nation_5m.shp")
# crop to lower 48 states
e <- as(extent(-125, -66, 24, 50), 'SpatialPolygons')
crs(e) <- "+proj=longlat +datum=WGS84 +no_defs"
usa <- crop(usa,e)
#1. coerce to points, then to data frame
# names are Lines.NR Lines.ID Line.NR coords.x1 coords.x2
## start here for polys
lin <- as(usa, "SpatialLinesDataFrame")
## start here for lines
pts <- as.data.frame(as(lin, "SpatialPointsDataFrame"))
#3. convert to data frame
# names are        long      lat order  hole piece  id group
dpts <- ggplot2::fortify(usa)
x.usa <- dpts$long
y.usa <- dpts$lat
for (year in years)
{
files <- c()
# get annual data for all components in the current year
for (name in names)
{
files <- append(files,
file.path(data_dir,name,
list.files(path = file.path(data_dir, name),
pattern=paste(year, "12.nc", sep=""))))
}
r <- stack(files)
# crop raster layers to bounded box of USA
e <- as(extent(-124.848974, -66.885444, 24.396308, 49.384358), 'SpatialPolygons')
crs(e) <- "+proj=longlat +datum=WGS84 +no_defs"
r <- crop(r, e)
# take a random sample of only 1% of the data
r.sample <- as.data.frame(sampleRandom(r, size=(dim(r)[1]*dim(r)[2]*0.01),
xy=TRUE, na.rm=TRUE))
x <- r.sample[,1]
y <- r.sample[,2]
xy <- data.frame(x,y)
coordinates(xy) = ~x + y
proj4string(xy) = proj4string(usa)
ov <- over(xy, as(usa,"SpatialPolygons"))
r.sample <- data.frame(r.sample, inUSA = ov)
r.final <- r.sample[complete.cases(r.sample),]
# perform k-means clustering, store cluster id in data frame
usa.kmeans <- kmeans(r.final[,-c(1,2,10)], 5)
# plot data points where color is determined by cluster
plot(r.final$x, r.final$y, col = usa.kmeans$cluster,
xlab = "Latitude", ylab = "Longitude",
main = paste("K-Means Clustering for ", year, sep=""),
pch=1, cex.main=0.8, cex.lab = 0.7, cex.axis = 0.6, cex=0.8)
lines(usa)
legend(-126, 35, legend=sort(unique(usa.kmeans$cluster)),
col = sort(unique(usa.kmeans$cluster)), pch = 19, cex = 0.7)
# Heatmap
centers <- usa.kmeans$centers
centers <- cbind(centers, rowSums(centers))
colnames(centers)[8] <- "Total"
heatmap(t(centers), main = paste("Cluster Centers for ", year, sep=""),
xlab = "Cluster", ylab = "Component", col = brewer.pal(9, "OrRd"))
legend(x = "bottomright", legend=round(seq(min(centers),max(centers), length.out=9),1),
col=brewer.pal(9, "OrRd"), pch = 15, pt.cex=4)
rm(list=c("files", "r.sample", "r.final", "centers", "r", "ov", "usa.kmeans", "xy"))
}
library(RColorBrewer)
data_dir <- "C:/Users/nickw/OneDrive/Desktop/UF/Undergrad Research/PM-research/data/Annual"
years <- 2013:2016
names <- c("BC", "NH4", "NIT", "OM", "SO4", "SOIL", "SS")
usa <- readOGR("C:/Users/nickw/OneDrive/Desktop/UF/Undergrad Research/PM-research/data/cb_2018_us_nation_5m.shp")
# crop to lower 48 states
e <- as(extent(-125, -66, 24, 50), 'SpatialPolygons')
crs(e) <- "+proj=longlat +datum=WGS84 +no_defs"
usa <- crop(usa,e)
#1. coerce to points, then to data frame
# names are Lines.NR Lines.ID Line.NR coords.x1 coords.x2
## start here for polys
lin <- as(usa, "SpatialLinesDataFrame")
## start here for lines
pts <- as.data.frame(as(lin, "SpatialPointsDataFrame"))
#3. convert to data frame
# names are        long      lat order  hole piece  id group
dpts <- ggplot2::fortify(usa)
x.usa <- dpts$long
y.usa <- dpts$lat
for (year in years)
{
files <- c()
# get annual data for all components in the current year
for (name in names)
{
files <- append(files,
file.path(data_dir,name,
list.files(path = file.path(data_dir, name),
pattern=paste(year, "12.nc", sep=""))))
}
r <- stack(files)
# crop raster layers to bounded box of USA
e <- as(extent(-124.848974, -66.885444, 24.396308, 49.384358), 'SpatialPolygons')
crs(e) <- "+proj=longlat +datum=WGS84 +no_defs"
r <- crop(r, e)
# take a random sample of only 1% of the data
r.sample <- as.data.frame(sampleRandom(r, size=(dim(r)[1]*dim(r)[2]*0.01),
xy=TRUE, na.rm=TRUE))
x <- r.sample[,1]
y <- r.sample[,2]
xy <- data.frame(x,y)
coordinates(xy) = ~x + y
proj4string(xy) = proj4string(usa)
ov <- over(xy, as(usa,"SpatialPolygons"))
r.sample <- data.frame(r.sample, inUSA = ov)
r.final <- r.sample[complete.cases(r.sample),]
# perform k-means clustering, store cluster id in data frame
usa.kmeans <- kmeans(r.final[,-c(1,2,10)], 5)
# plot data points where color is determined by cluster
plot(r.final$x, r.final$y, col = usa.kmeans$cluster,
xlab = "Latitude", ylab = "Longitude",
main = paste("K-Means Clustering for ", year, sep=""),
pch=1, cex.main=0.8, cex.lab = 0.7, cex.axis = 0.6, cex=0.8)
lines(usa)
legend(-126, 35, legend=sort(unique(usa.kmeans$cluster)),
col = sort(unique(usa.kmeans$cluster)), pch = 19, cex = 0.7)
# Heatmap
centers <- usa.kmeans$centers
centers <- cbind(centers, rowSums(centers))
colnames(centers)[8] <- "Total"
heatmap(t(centers), main = paste("Cluster Centers for ", year, sep=""),
xlab = "Cluster", ylab = "Component", col = brewer.pal(9, "OrRd"))
legend(x = "bottomright", legend=round(seq(min(centers),max(centers), length.out=9),1),
col=brewer.pal(9, "OrRd"), pch = 15, pt.cex=4)
rm(list=c("files", "r.sample", "r.final", "centers", "r", "ov", "usa.kmeans", "xy"))
}
rm(list=ls())
library(stats)
library(ncdf4)
library(raster)
library(sf)
library(rgdal)
library(ggplot2)
library(tigris)
library(tidyverse)
library(rgeos)
library(spatialEco)
library(ptinpoly)
library(RColorBrewer)
data_dir <- "C:/Users/nickw/OneDrive/Desktop/UF/Undergrad Research/PM-research/data/Annual"
years <- 2013:2016
names <- c("BC", "NH4", "NIT", "OM", "SO4", "SOIL", "SS")
usa <- readOGR("C:/Users/nickw/OneDrive/Desktop/UF/Undergrad Research/PM-research/data/cb_2018_us_nation_5m.shp")
# crop to lower 48 states
e <- as(extent(-125, -66, 24, 50), 'SpatialPolygons')
crs(e) <- "+proj=longlat +datum=WGS84 +no_defs"
usa <- crop(usa,e)
plot(usa)
usa <- crop(usa,e)
#1. coerce to points, then to data frame
# names are Lines.NR Lines.ID Line.NR coords.x1 coords.x2
## start here for polys
lin <- as(usa, "SpatialLinesDataFrame")
## start here for lines
pts <- as.data.frame(as(lin, "SpatialPointsDataFrame"))
x.usa <- dpts$long
#3. convert to data frame
# names are        long      lat order  hole piece  id group
dpts <- ggplot2::fortify(usa)
y.usa <- dpts$lat
x.usa
x.usa <- dpts$long
y.usa <- dpts$lat
x.usa
y.usa
plot(x.usa, y.usa)
# This function is the same as the previous function,
# but takes in the pollutant type and years as arguments.
# Much faster as long as you know the pollutant codes.
PMviz <- function(type, years)
{
# store vector of composition codes
comp <- c("PM25", "SO4", "NIT", "NH4", "OM", "BC", "SOIL", "SS")
# store vector of years
if (missing(years))
{ years <- c(2000:2017) }
# argument error-checking
if (!(type %in% comp))
{
message("ERROR: Invalid pollutant type. Use one of the following codes:")
print(c("PM25 (total particulate matter)","SO4  (sulfate)",
"NIT  (nitrate)", "NH4  (ammonium)",
"OM   (organic matter)", "BC   (black carbon)",
"SOIL (mineral dust)", "SS   (sea-salt)"))
invokeRestart("abort")
}
message("Gathering data, please wait...")
# PM25 data has a unique filename, so we handle it alone here
if (type == "PM25")
{
year <- years[1]
filename <- paste("data/PM25/V4NA03_PM25_NA_", year, '01_', year,
'12-RH35.nc', sep="")
r <- stack(raster(filename, varname = "PM25"))
if (length(years) > 1) # if start and end are the same, skip this
{
for (year in years[2:length(years)])
{
filename <- paste("data/PM25/V4NA03_PM25_NA_", year, '01_', year,
'12-RH35.nc', sep="")
r <- stack(r, raster(filename, varname = "PM25"))
}
}
}
else # the rest of the data has similar filenames
{
year <- years[1]
filename <- paste("data/", type, "/GWRwSPEC_", type, 'p_NA_',
year, '01_', year, '12-wrtSPECtotal.nc', sep="")
r <- stack(raster(filename, varname = type))
if (length(years) > 1) # if start and end are the same, skip this
{
for (year in years[2:length(years)])
{
filename <- paste("data/", type, "/GWRwSPEC_", type, 'p_NA_',
year, '01_', year, '12-wrtSPECtotal.nc', sep="")
r <- stack(r, raster(filename, varname = type))
}
}
}
names(r) <- paste(type, "in", years)
plot_count <- length(years)
# set min and max for all raster layers
# NOTE: this part can take a while, but is necessary to have
# comparable color intervals across plots.
r <- setMinMax(r)
# maxValue returns a vector with the max for each individual
# layer (year in our context). Taking the max of that vector will give us
# the max across all years in the raster, so that we can set a reasonable
# scale of values across all plots for easy comparison from 0 to max.
max <- max(maxValue(r))
message("Plotting data...")
if (plot_count < 6)
{
plot(r,1:plot_count, breaks=c(seq(0,50,5)),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
else if (plot_count < 12)
{
plot(r,1:6, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,7:plot_count, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
else
{
plot(r,1:6, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,7:12, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,13:plot_count, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
message("Done!")
message(paste("Max is", max(maxValue(r))))
}
PM_viz()
PMviz("BC", 2000)
data_dir <- "C:/Users/nickw/OneDrive/Desktop/UF/Undergrad Research/PM-research/data/"
# This function is the same as the previous function,
# but takes in the pollutant type and years as arguments.
# Much faster as long as you know the pollutant codes.
PMviz <- function(type, years)
{
# store vector of composition codes
comp <- c("PM25", "SO4", "NIT", "NH4", "OM", "BC", "SOIL", "SS")
# store vector of years
if (missing(years))
{ years <- c(2000:2017) }
# argument error-checking
if (!(type %in% comp))
{
message("ERROR: Invalid pollutant type. Use one of the following codes:")
print(c("PM25 (total particulate matter)","SO4  (sulfate)",
"NIT  (nitrate)", "NH4  (ammonium)",
"OM   (organic matter)", "BC   (black carbon)",
"SOIL (mineral dust)", "SS   (sea-salt)"))
invokeRestart("abort")
}
message("Gathering data, please wait...")
# PM25 data has a unique filename, so we handle it alone here
if (type == "PM25")
{
year <- years[1]
filename <- paste(data_dir, "/Annual/V4NA03_PM25_NA_", year, '01_', year,
'12-RH35.nc', sep="")
r <- stack(raster(filename, varname = "PM25"))
if (length(years) > 1) # if start and end are the same, skip this
{
for (year in years[2:length(years)])
{
filename <- paste("data/PM25/V4NA03_PM25_NA_", year, '01_', year,
'12-RH35.nc', sep="")
r <- stack(r, raster(filename, varname = "PM25"))
}
}
}
else # the rest of the data has similar filenames
{
year <- years[1]
filename <- paste(data_dir, "/Annual/", type, "/GWRwSPEC_", type, 'p_NA_',
year, '01_', year, '12-wrtSPECtotal.nc', sep="")
r <- stack(raster(filename, varname = type))
if (length(years) > 1) # if start and end are the same, skip this
{
for (year in years[2:length(years)])
{
filename <- paste(data_dir, "/Annual", type, "/GWRwSPEC_", type, 'p_NA_',
year, '01_', year, '12-wrtSPECtotal.nc', sep="")
r <- stack(r, raster(filename, varname = type))
}
}
}
names(r) <- paste(type, "in", years)
plot_count <- length(years)
# set min and max for all raster layers
# NOTE: this part can take a while, but is necessary to have
# comparable color intervals across plots.
r <- setMinMax(r)
# maxValue returns a vector with the max for each individual
# layer (year in our context). Taking the max of that vector will give us
# the max across all years in the raster, so that we can set a reasonable
# scale of values across all plots for easy comparison from 0 to max.
max <- max(maxValue(r))
message("Plotting data...")
if (plot_count < 6)
{
plot(r,1:plot_count, breaks=c(seq(0,50,5)),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
else if (plot_count < 12)
{
plot(r,1:6, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,7:plot_count, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
else
{
plot(r,1:6, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,7:12, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
plot(r,13:plot_count, breaks=c(seq(from=0,to=max,by=floor(max/10))),
col=rev(brewer.pal(11,"RdYlBu")),
xlab="Longitude", ylab="Latitude")
}
message("Done!")
message(paste("Max is", max(maxValue(r))))
}
PMviz("BC", 2000)
